import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { message } from 'antd';
const initialState = {
    carts: [],
};

export const orderSlice = createSlice({
    name: 'order',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        doAddBookAction: (state, action) => {
            let carts = state.carts;
            const item = action.payload;

            let isExitstIndex = carts.findIndex((c) => c._id === item._id);
            if (isExitstIndex > -1) {
                carts[isExitstIndex].quantity = carts[isExitstIndex].quantity + item.quantity;

                if (carts[isExitstIndex].quantity > item.detail.quantity) {
                    carts[isExitstIndex].quantity = item.detail.quantity;
                }
            } else {
                carts.push({ quantity: item.quantity, _id: item._id, detail: item.detail });
            }
            //update redux
            state.carts = carts;
            message.success('sản phẩm đã được thêm vào giở hàng');
        },
        doUpdateCartAction: (state, action) => {
            let carts = state.carts;
            const item = action.payload;

            let isExitstIndex = carts.findIndex((c) => c._id === item._id);
            if (isExitstIndex > -1) {
                carts[isExitstIndex].quantity = item.quantity;

                if (carts[isExitstIndex].quantity > carts[isExitstIndex].detail.quantity) {
                    carts[isExitstIndex].quantity = carts[isExitstIndex].detail.quantity;
                }
            } else {
                carts.push({ quantity: item.quantity, _id: item._id, detail: item.detail });
            }
            //update redux
            state.carts = carts;
        },
        doDeleteItemCartAction: (state, action) => {
            state.carts = state.carts.filter((c) => c._id !== action.payload._id);
        },
        doPlaceOrderAction: (state, action) => {
            state.carts = [];
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {},
});

export const { doAddBookAction, doUpdateCartAction, doDeleteItemCartAction, doPlaceOrderAction } = orderSlice.actions;

export default orderSlice.reducer;
